
* 前言
之前在百度的几个项目的存储选型中，曾经考虑到使用Redis，因为应用场景很适合。但是最
终因为对Redis的存储持久化，多机以及运维监控存在疑虑而放弃，并转用公司内部的KV存储。

* 文章搜集
+ [[http://www.cnblogs.com/liping13599168/archive/2011/04/12/2013094.html][Redis源码解析（1）——源码目录介绍]]
+ [[http://blog.nosqlfan.com/html/2949.html][Redis源码分析系列文章]]
+ [[http://blog.nosqlfan.com/html/4007.html][Redis运行流程源码解析]] （对Redis的网络通讯层分析得很详细）

* Redis Client
通过Eclipse稍微阅读了Redis Client端的代码。Client端的代码位于redis-cli.c以及
hiredis.c中，其中后者是Client与Redis Server通讯的核心代码，前者封装了后者，提供给
用户以命令行的接口。

在redis-cli的交互式的每轮循环中，有会两个函数被先后调用。
#+begin_src C
int redisAppendCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen);
int redisGetReply(redisContext *c, void **reply);
#+end_src
* Redis Server
main函数位于redis.c的3091行。

#+begin_src c
/* Global vars */
struct redisServer server; /* server global state */
struct redisCommand *commandTable;
#+end_src

前者是Redes服务器的配置和状态的全局变量，其类型是个非常庞大的struct。server变量在
main函数刚开始就进行了初始化，相关函数是：

#+begin_src c
initServerConfig();
#+end_src

* 学习回顾
** 初步了解，有些质疑 <2014-02-21 五>
初步了解了Redis的源码架构，并通过源码和别人的文章了解了Redis接受网络请求时的操作。
看到Redis在网络通讯层写了那么多底层代码，我在想显然这些东西通过RPC库可以简单地实
现。

*Redis目前给我的感觉是就一层套一层，而它真正属于自己的核心代码还是没有看到。*

看起来Redis作者是非常反感使用一些开源的库的，他要保证Redis代码的简洁。在我看来，
自己实现底层反倒让项目显得丑陋，因为它给自己增加了许多多余的代码，多余代码越多的
项目越丑陋。就像我上面说的，代码包裹了一层又一层，最里面才是Redis自己的核心代码。
