* 学习Org-mode的官方手册
地址是：[[http://orgmode.org/manual/index.html][The Org Manual]]。这份文档制作很精良，而且（显然）是用Org-mode写的。
** Wiki式的Inner link
Org-mode支持wiki式的内部链接，格式为：

#+BEGIN_SRC org
[[file:org-mode.org][Org Mode - Organize Your Life In Plain Text!]]
#+END_SRC 

这就让org-mode拥有了写wiki的能力。

** 语言支持
Org-mode支持大量的语言，除了常见的C++，Java，Python外，甚至还支持Graphviz，
Gnuplot，Plantuml等复杂的绘图语言，非常的强大。这是[[http://orgmode.org/manual/Languages.html#Languages][Org-Mode支持的语言列表]]。

* 导出为HTML
+ [[http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][Publishing Org-mode files to HTML]]
+ [[http://orgmode.org/manual/Configuration.html#Configuration][Org-mode publishing configuration]]

** 自动生成sitemap（站点地图）
我想要在我的导出文件中加入一个自动生成的笔记列表，Google一下，发现Org的publish功
能支持[[http://orgmode.org/manual/Sitemap.html][自动生成sitemap.html]] 。我需要在我的导出配置中加入下面两行：
#+begin_src emacs-lisp
:auto-sitemap t ; 打开自动生成sitemap
:sitemap-sort-folders "last" ; 设定sitemap页面的条目的排序方式
#+end_src

设好后，重新导出为HTML，得到了我的个人笔记的sitemap页面：
http://elvestar.github.io/notes/sitemap.html

** 自定义CSS
我决定在norang.ca提供的org.css的基础上做修改。关于这个org.css，我第一个不喜欢的就
是它把标题的每个单词的首字母的都大写了。我百度一下，发现是 *capitalize* 这个css属
性导致的，于是我在org.css上删除了它。

norang.ca提供的org.css最大的不便在于TOC不好看，我(我将TOC做成 [[http://v3.bootcss.com/customize/][bootstrap的经典风格]]
，即动态的，自动展开/折叠的，跟着屏幕走的TOC。不过看起来改造代价非常大，我需要修
改org的 *org-html-publish-to-html* 函数。我在思考能够一个JS脚本在浏览器端自动根据
Header来生成TOC，于是我Google了一下，找到了 [[http://projects.jga.me/toc/][TOC jQuery插件]] ，我想借助它以及
bootstrap将我的笔记进行彻底的美化，但这周没时间了，我下次再搞。反正norang.ca的
org.css用着也挺好的，毕竟得之简朴嘛。

** 附加评论框
我使用org导出为HTML来生成我的个人静态站点。静态站点相对于Wordpress等专门的博客系
统的弱点就在于 *评论系统* ，除此之外，只有优势。幸好，市面上有很多 *第三方的评论
系统* ，并且它们可以很轻易地嵌入到我的静态站点中，它们包括国外的Disqus，以及国内
的友言，多说，畅言等。Disqus加载速度较慢，且不够本土化（无法与国内社交网站的打
通），故先排除。在国内的这几个产品中，我选择了 *多说* ，因为它的评论框更容易与我
的站点风格相融合。

我了解了一下org的HTML导出系统，发现可以很轻易地将多说评论框集成进去，只需要
在~/.emacs中加入：
#+begin_src emacs-lisp
(setq org-html-postamble t)                                                                            
(setq org-html-postamble-format                                                                        
 '(("en"                                                                                               
    "<!-- Duoshuo Comment BEGIN -->                                                                    
    <div class='ds-thread'></div>                                                                      
    <script type='text/javascript'>                                                                    
    var duoshuoQuery = {short_name:'你的多说账户名'};                                                        
    (function() {                                                                                      
                var ds = document.createElement('script');                                             
                ds.type = 'text/javascript';ds.async = true;                                           
                ds.src = 'http://static.duoshuo.com/embed.js';                                         
                ds.charset = 'UTF-8';                                                                  
                (document.getElementsByTagName('head')[0]                                              
                  || document.getElementsByTagName('body')[0]).appendChild(ds);                        
                })();                                                                                  
    </script>                                                                                          
    <!-- Duoshuo Comment END -->"                                                                      
    )))           
#+end_src

这样，导出的HTML将自动在<body>标签的最后面缀上多说评论框。如图：

[[./img/org-mode-1.png]]

** 附加分享按钮
我用的是JiaThis。
#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble-format                                                                        
  '(("en"                                                                                                        
     "
      <!-- JiaThis Button BEGIN -->                                                                      
      <div class='jiathis_style'>                                                                        
      <span class='jiathis_txt'>分享到：</span>                                                          
      <a class='jiathis_button_tsina'>新浪微博</a>                                                       
      <a class='jiathis_button_douban'>豆瓣</a>                                                          
      <a class='jiathis_button_weixin'>微信</a>                                                          
      <a class='jiathis_button_evernote'>EverNote</a>                                                    
      <a class='jiathis_button_googleplus'>Google+</a>                                                   
                                                                                                         
      <a href='http://www.jiathis.com/share?uid=1891272'
      class='jiathis jiathis_txt jiathis_separator jtico
      jtico_jiathis' target='_blank'>更多</a> <a
      class='jiathis_counter_style'></a> </div> <script
      type='text/javascript' > var jiathis_config={
      data_track_clickback:true, summary:'', shortUrl:false,
      hideMore:false } </script> <script type='text/javascript'
      src='http://v3.jiathis.com/code/jia.js?uid=1891272'
      charset='utf-8'></script> <!-- JiaThis Button END -->
     ")))
#+END_SRC
** 集成Google Analytics
这个也很简单，跟 *附加评论框* 的方法几乎一样。我们首先要在Google Analytics上注册
一个账户，获取跟踪ID，然后将跟踪JS代码附加到 *org-html-postamble-format* 上。

#+begin_src emacs-lisp
(setq org-html-postamble-format                                                                        
 '(("en"                                                                                               
    "<!-- Duoshuo Comment BEGIN -->                                                                    
    <script>                                                                                           
    略...
    </script>                                                                                          
    <!-- Duoshuo Comment END -->                                                                       
    <!-- Google Analytics BEGIN -->                                                                    
    <script>                                                                                           
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){                       
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),                   
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)                  
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');                     
                                                                                                       
    ga('create', '你的UA', '你的网址');                                                     
    ga('send', 'pageview');                                                                            
                                                                                                       
    </script>                                                                                          
    <!-- Google Analytics END -->                                                                      
    "                                                                                               
    )))         
#+end_src

** 强制全部导出HTML
默认情况下，org-mode会根据时间戳来判断一个文件（.org或.png）是否被修改过，进而决
定是否对文件执行 *publishing-function* 。这种做法减少了HTML导出的开销，但有时候会
带来不便，特别是在清空过导出目录（ *publishing-directory* ）后，再次导出，将会漏
掉很多文件。

还好，org提供了 [[http://orgmode.org/guide/Publishing.html][强制导出]] 的功能，只需要在执行导出函数时，加上一个 [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Prefix-Command-Arguments.html][Prefix Command
Arguments]] 就可以了。具体做法：
#+begin_src emacs-lisp
C-u M-x org-publish
#+end_src
然后选择你要导出的project。由于强制导出并不是频繁执行的命令，所以我就不设
快捷键了。

** 去掉自动分行带来的讨厌的空格
Emacs的自动分行功能很好，但是将org文件导出为HTML后，会自动在空行出加入空格，对于
中文玩家来说，这点很讨厌。我用 *org-mode 中文 空格* 为关键词Google了一下，找到了
解法：
+ [[http://fasheng.github.io/blog/2013-09-25-fix-chinese-space-issue-when-exporting-org-mode-to-html.html][org-mode 导出 html 时中文空格问题的临时解决方法]]

按照此文，我在我的~/.emacs里面加上下面一段emacs-lisp代码后，问题解决了。
#+BEGIN_SRC elisp
(defadvice org-html-paragraph (before fsh-org-html-paragraph-advice                                    
                                      (paragraph contents info) activate)                              
  "Join consecutive Chinese lines into a single long line without                                      
unwanted space when exporting org-mode to html."                                                       
  (let ((fixed-contents)                                                                               
        (orig-contents (ad-get-arg 1))                                                                 
        (reg-han "[[:multibyte:]]"))                                                                   
    (setq fixed-contents (replace-regexp-in-string                                                     
                          (concat "\\(" reg-han "\\) *\n *\\(" reg-han "\\)")                          
                          "\\1\\2" orig-contents))                                                     
    (ad-set-arg 1 fixed-contents)                                                                      
    ))     
#+END_SRC

* 博客发布
+ [[http://orgmode.org/worg/org-tutorials/org-jekyll.html][Using org to Blog with Jekyll]]
+ [[http://dayigu.github.io/WhyUseOrgModeToWriteBlog.html][为什么用 org-mode 写 blog？]]

* TODO 用Org写PPT
无意中看到了 [[http://jerrypeng.me/2013/10/remove-org-html-useless-spaces/][此文]] ，声称Org-mode + Tex Live能写出很炫酷的PPT。我先记一下，有空搞
搞。
* Organize Your Life In Plain Text!
这篇文章据说非常经典，但确实非常长。地址是：[[http://doc.norang.ca/org-mode.html]]

** 前六章读完

第六章讲了如何快速地 *Add New Tasks*, 包括下面几个要点：
1. 用Capture Mode来快速Add Task
2. 所有新增的Tasks都加入到一个专门的文件中（refile.org）
4. 为每类Task（如Phone，Meeting，普通Task等）各预设一个模板
5. 快速地完成Task的添加，不中断手头的工作

** Publish and Exporting
拷贝了作者的emacs lisp脚本，实现了一键批量递归转化为HTML并拷贝到elvestar.com， *
初步将我的新式的知识管理流程给打通了* ，意义很大！
   
** Refile
看了第七章Refiling Tasks，了解到作者是 *通过refile来将临时放到refile.org中的Task
给移到合适的位置* 。我实践了一下，暂时还摸不清门道，我目前只是拷贝了作者的配置到
自己的.emacs。
*** TODO 有时间，我会深入了解一下refile

* 升级Org-mode版本
我机器上的org-mode版本较低，无法支持批量（Project）地导出为HTML，所以我尝试将其升级为最新的 *Stable version 8.2.5h (Jan. 2014)*

升级步骤：
1. git clone git://orgmode.org/org-mode.git
2. cd org-mode
3. sudo make 
4. sudo make install （注意，默认是安装到/usr/share/emacs/site-lisp/org/）
5. sudo mv \/usr/local/Cellar/emacs/24.3/share/emacs/24.3/lisp/org org_bak （备份老版的org-mode）
6. sudo mv \/usr/share/emacs/site-lisp/org/ \/usr/local/Cellar/emacs/24.3/share/emacs/24.3/lisp/ 

* 在Org中绘图
** 绘制Ascii图
+ [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Picture-Mode.html#Picture-Mode][Emacs Picture Mode]]
+ [[http://www.lysator.liu.se/~tab/artist/][Emacs Artist Mode]]
+ [[http://www.cbi.pku.edu.cn/chinese/documents/csdoc/emacs/chap7.html][图形的编辑（Emacs使用帮助 - pku）]]
+ [[http://lifegoo.pluskid.org/wiki/EmacsEditPicture.html][在 Emacs 里编辑 Ascii 图片]]
+ [[http://emacser.com/artist-mode.htm][用artist-mode画文本图]]
	   
** ditaa	   
文章搜集	   
+ [[http://emacser.com/emacs-ditaa.htm][Emacs中绘图 － ditaa篇]]
+ [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-ditaa.html][ob-doc-ditaa - Org-mode]]
		   
有两个关键点：	   
		   
*** 告诉Emacs加载ditaa语言的支持：
#+begin_src emacs-lisp
(org-babel-do-load-languages                                                                        
  (quote org-babel-load-languages)                                                                   
  (quote ((ditaa . t) 
#+end_src	   
 		   
*** 告诉Emacs在哪里找到ditaa的jar文件
#+begin_src emacs-lisp
(setq org-ditaa-jar-path "/usr/local/Cellar/ditaa/0.9/libexec/ditaa0_9.jar") 
#+end_src	   
		   
具体参照	   
		   
* 代码着色（语法高亮）
在我的机器上，/usr/local/Cellar/emacs/24.3/share/emacs/24.3/lisp/org目录下面的
*htmlize.el* 文件负责做代码的着色。如果没找到，则需要下载并拷贝到这下面。

* 相关文章搜集
+ [[http://www.cnblogs.com/bamanzi/archive/2012/05/12/org-mode-so-powerful.html][为什么说org-mode是个神器]]

* 学习回顾
** 已经入了门 <2014-02-15 六>
经过了春节以及前后的集中学习和实践，我已经将Emacs Org-mode融入到了我的工作和生活
中来了，并且已经初步感受到了它的威力（尤其是在写博客和GTD两方面）。我后续学习的重
点包括：
1. 快速capture task - 有点bug要解决
2. Refile的使用 - 目前还没感受到它的价值
3. Ditta，Graphviz等外围工具的学习
4. 使用一个基于Org-mode的博客生成器，把我的博客重新搭建起来

我的下一步计划是尝试一下基于Org-mode的博客生成器，以及学习如何将已经Done的Task给归档。
