#+TITLE: Tmux - GNU Screen的替代者


* 前言
我用了很久的screen，在使用过程中踩了不少坑，也排了不少坑（参考 [[file:screen.org][screen]] ）。现在我
又遇到了一个screen与vim的兼容问题，导致很多vim插件的特殊符号无法显示（如倒三角和
右三角），我决定这次先不排这个坑了，而是尝试一下据说是screen的替代者的 *tmux* 。

*tmux* 是一种终端复用的工具。它可以在一个终端里虚拟出多个终端，而且可以将这些终端
以 *session（会话）* 的形式保存下来，用户可以随时随地断开，随时随地连接。

一些链接：
+ [[http://tmux.sourceforge.net/][tmux的主页]] （Sourceforge的，需要用VPN登陆）
+ [[http://www.openbsd.org/cgi-bin/man.cgi?query%3Dtmux&sektion%3D1][tmux的用户手册]]

* 上手
我有screen的使用经验，我知道作为一种终端复用的工具最常用的操作是什么，所以我
这里画了一张表格，列出screen的常用操作及其快捷键，同时还列出了tmux相应的快捷键。
另外，我决定在上手之前，先不改默认的快捷键。

| 操作            | screen               | tmux                     |
|-----------------+----------------------+--------------------------|
| 新建session     | screen -S xxx        | tmux new -s xxx          |
| 断开session     | C-a d                | C-b d                    |
| 连接session     | screen -dr xxx       | tmux attach -d -t xxx    |
| 删除session     | 连续C-d（shell指令） | tmux kill-session -t xxx |
| 列出全部session | screen -ls           | tmux ls                  |
| 新建窗口        | C-a c                | C-b c                    |
| 删除窗口        | C-d （shell指令）    | C-d 或 kill-window -t x  |
| 下一个窗口      | C-a n                | C-b n                    |
| 上一个窗口      | C-a p                | C-b p                    |

可以看出，tmux的快捷键大体上与screen保持了一致。只不过在命令行中使用的话，相对
screen语句比较繁琐。

** 修改 prefix key (激活控制台的按键)
在screen下，我习惯用C-x作为我的prefix key，以此我在我的 *.tmux.conf* 里面加入了下
面三行，将prefix key由默认的C-b修改为C-x。

#+begin_src sh
set-option -g prefix C-x                                                                            
unbind-key C-b                                                                                      
bind-key C-x send-prefix 
#+end_src

*需要注意* 的是，修改完配置后，需要执行 *tmux source-file ~/.tmux.conf* 重新加载
配置才能使配置生效。tmux的server进程只有在启动时才会自动加载配置。在tmux的server
进程已经启动的情况下，即使是新建的session也不会加载新的.tmux.conf。

tmux的这种设定导致的结果是 *一个tmux server下的所有session都使用一个配置* 。一旦
接受了这种设定，会发现省了不少麻烦。

#+begin_example
C-x是Emacs各种基本操作的引导键，所以我这样的改法，势必会导致在tmux中用Emacs发生按键冲
突，C-x不是一个很好的选择。还好我现在还没有在tmux中使用Emacs，我先把这个问题放
一放。
#+end_example

** 修改按键绑定
在tmux中，修改按键绑定的指令是 *bind-key* 。这条指令太常用了，所以我把官网的指令
说明给搬来了：

#+begin_example
    bind-key [-cnr] [-t key-table] key command [arguments]
                   (alias: bind)
             Bind key key to command.  By default (without -t) the primary key
             bindings are modified (those normally activated with the prefix
             key); in this case, if -n is specified, it is not necessary to
             use the prefix key, command is bound to key alone.  The -r flag
             indicates this key may repeat, see the repeat-time option.

             If -t is present, key is bound in key-table: the binding for
             command mode with -c or for normal mode without.  To view the
             default bindings and possible commands, see the list-keys
             command.
#+end_example

从说明中得知，默认情况下，绑定的按键都需要先激活控制台后（按prefix key）。如果想
把某个键设定为不需要prefix key，只需要加入-n。

我的习惯是将F1到F4设定为tmux窗口的基本操作快捷键，所以我在我的.tmux.conf中加入了下面几行。
#+begin_src sh
# Key binding                                                                                          
bind -n F1 previous-window                                                                             
bind -n F2 next-window                                                                                 
bind -n F3 new-window                                                                                  
bind -n F4 command-prompt "rename-window '%%'"   
#+end_src

第四行需要解释一下，它使用了tmux的 *command-prompt* 功能。即当按下F4后，tmux
会弹出交互式窗口，让用户填写window name，填好回车后，这条指令才会执行。 *%%* 这个占
位符就是指代用户填写的window name。

全部可被绑定的指令在这里 [[http://www.openbsd.org/cgi-bin/man.cgiquery%3Dtmux&sektion%3D1#WINDOWS%2BAND][tmux WINDOWS AND PANES]] 有列出，享受它！

** 设置Status Line
tmux的状态行设置很丰富，但我决定先从网上找一个先用着。Google一下，找到了 [[https://gist.github.com/zolrath/2305333][wemux's
tmux status line]]，我它粘贴到我的.tmux.conf，然后执行 *tmux source-file
~/.tmux.conf* ，发现界面一下子变得高大上了。

[[./img/tmux-1.png]]

** 一些很酷炫的操作
C-b t，然后屏幕中间就出来一个时钟了。

[[./img/tmux-2.png]]
  
* 学习回顾
** 已经可以用tmux替代screen了 <2014-02-16 日>
经过这段时间的学习，特别是今晚的集中学习和实践之后，我已经上手了tmux，并且已经觉得
tmux完全超越了screen。tmux对于各种terminal（终端）的兼容性做得比screen好很多，特
别体现在F1到F4的绑定上，在screen中，需要自己设定好terminal的类型（xterm,
xterm-256color, rxvt....），而否则无法正确绑定到F1到F4上，而tmux已经预先把
terminal的兼容问题考虑到了。

下周一开始，我就会扔掉screen，将工作环境切换到tmux上来，并在实践中不断地熟悉tmux。
我下一次集中学习tmux的要点在于：
1. 窗口的切分
2. 探究是否可以用tmux来提供类似于SecureCRT的 *Session Clone* 的功能
3. Status Line的进一步改进

