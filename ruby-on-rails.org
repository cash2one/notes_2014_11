
* 安装Rails
ruby -v确认的的Mac的ruby版本是2.0，比Rails需要的1.9要高。这很好，Mac确实对程序员
很友好的一个系统。然后我sudo gem install rails，安装rails，但是遇到了一些权限问题，
导致我无法成功安装。一查发现是我的/usr和/usr/local目录的权限太宽了，是777！我对它
们chmod 755后，问题解决。参考此文。

然后，我用rails new blog来生成一个app，发现总是失败，失败原因是缺少依赖，需要通过
gem install来安装某个包。我装好后，rails new blog继续失败，提示我通过gem install
安装另外一个包。。。如此我一个一个地安装好了依赖后，终于new blog成功了。Rails给我
的感觉是：Rails的依赖太多了，这个框架真的如传说中的那么庞大臃肿。

* 学习Rails Guides (2014-01-30)

参考：Mac上安装Rails。

  1. gem sources --remove https://rubygems.org/
  2. gem source -a http://ruby.taobao.org
  3. gem sources -l
  4. rails new blog --skip-bundle
  5. vi blog/Gemfile (source 'https://rubygems.org' -> source
     'http://ruby.taobao.org')
  6. sudo gem install bundle
  7. cd blog
  8. rails server
  9. http://localhost:3000  

Open the file config/routes.rb in your editor.This is your
application's routing file which holds entries in a special DSL
(domain-specific language) that tells Rails how to connect incoming
requests to controllers and actions.

于是，我们修改get "welcome/index"为root "welcome#index”，告诉rails，将
blog这个application的根页面访问请求映射到'welcome’这个
controller的’index’这个action。

所有的Controller都继承自ApplicationController基类，在各个Controller类中
定义method就相当于定义action（看来，method == action）

用erb生成了一个提交表单的HTML页面。erb应该是类似于jinja的HTML模板库。

Model在5.4节被引入，MVC三者终于凑齐了。Controller和View我之前就理解，而Model，我
看了下这一节发现它和数据库相关，具体地说，是和数据库里的某张表相关。

rails g model Post title:string text:text这行语句的效果为：创建一个名叫Post的
Model，并（隐式）创建一个名为posts的table，table中有两个字段。这里还有一个对应关
系：Modle的attributes对应设table中的column。

改变了Model之后，需要执行rake db:migrate来应用migrate。

** Rails的Post参数检验和错误提示
参数校验（Validation）是在Module里面设定的，而错误提示的展现是放在View里面实现的。

** Edit and update
截止目前，CRUD四者中，CR已经实现。现在要实现U。按照Rails Guides，实现updates需的
步骤如下：
1. 在posts_controller中定义edit action
2. 在views/posts/下面实现edit对应的view
3. 在posts_controller中定义update action
4. 修改posts index view，为每个post加上'Edit'，链接到对应edit view

** 添加第二个model: comment
首先，需要生成model：
#+begin_src sh
rails generate model Comment commenter:string body:text post:references
#+end_src

生成model之后，需要执行migration：
#+begin_src sh
rake db:migrate
#+end_src 

然后，我们要将两个model（comment和post）关联起来，让post可以通过post.comments来获
取每篇文章的评论。我们要编辑app/models/post.rb，加上一行 *has_many :comments* 

我们还要修改config/routes.rb，让comments属于posts的 *nested resource*

Model已经生成好了，下面要生成其controller。如下：
#+begin_src sh                                                                      
rails generate controller Comments
#+end_src

然后编辑app/controllers/comments_controller.rb，实现create方法：
#+begin_src ruby
def create     
    @post = Post.find(params[:post_id])    
    @comment = @post.comments.create(params[:comment].permit(:commenter, :body))        redirect_to post_path(@post)
end    
#+end_src 

最后，实现view。comment不需要专门的view，它是嵌套在post的show view内部的。我们需
要编辑 app/views/posts/show.html.erb，加入新增comment以及展示comments的erb代码。

这样，我们的新model（comment）已经创建好并集成到post了。

* 初步感受
学完Rails Guides中的 [[http://guides.rubyonrails.org/getting_started.html][Getting Started with Rails]] 后，对Rails的初步印象如下：
1. Rails尽量减少不需要的重复，比如说源码文件路径结构已经隐含了
   Model/View/Controller的层次结构，源码中直接调用就可以了，不必要再加入
   #include/import这样的语句了
2. Ruby语法很怪异（以我这个C++程序员的角度），但是用起来很舒服（舒服度更甚于Python）
3. Rails在私底下为用户做了各种事，虽然用少量代码就完成了一个app，但我完全不知道底层细节

* 问题记录
** undefined method `errors' for nil:NilClass
Google一下，在 [[http://stackoverflow.com/questions/18136632/undefined-method-errors-for-nilnilclass-when-calling-on-errors-method][Stackoverflow上]] 得到答案。原来，我访问post的new action后，后端会执
行controller的new方法，而我的new方法中并没有构造对象，导致了NilClass错误。

我应该修改 *app/controllers/posts_controller.rb* 的new方法。如下：
#+begin_src ruby
def new     
    @post = Post.new    
end  
#+end_src
