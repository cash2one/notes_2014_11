
* SQL 实践经验
** 字符串替换（REPLACE)
具体问题：修改数据库里的一批记录，将其中的报警人字段中的指定人去掉（该报警人字段的值是由多个人组成，用分号间隔）

解决方法：利用 SQL 中的内置的 replace 函数。如下：
#+begin_src sql
update download_config set mailList = replace(mailList, "lixxx11@baidu.com;", "") where nodeId = 200006912;
update download_config set mailList = replace(mailList, "lixxx11@baidu.com", "") where nodeId = 200006912;
#+end_src

** 修改字段默认值
#+BEGIN_SRC sql
mysql> alter table agent_config alter zk_log_file set default "/noah/log/logagent.log";
#+END_SRC
参考： [[http://dev.mysql.com/doc/refman/5.1/en/alter-table.html][MySQL: 13.1.7 ALTER TABLE Syntax]]
** 修改 enum 字段
#+BEGIN_SRC sql
alter table log_config change log_status log_status ENUM('enabled','disabled','applying','deleting','deleted') default null;
#+END_SRC
* 正则表达式
下面的 SQL 实现了搜索表中 bns_name 字段不满足正确的 faker.bns 的模式的所有记录。
#+BEGIN_SRC sh
mysql> select log_module_id , bns_name  from minos_bns_logs where noah_node_path = "BAIDU" and bns_name not REGEXP "^[0-9.;]{1,}faker.bns";
+---------------+-----------------------------------------------------------------------------------------------------------------------------------+
| log_module_id | bns_name                                                                                                                          |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------+
|          1252 | jx-qianqian28.jx;10.81.24.176.faker.bns                                                                                           | 
|          1379 | 10.65.25.206;yx-jt06.yx01.faker.bns                                                                                               | 
|          2084 | yf-amdan00-cn03.yf01;yf-amdan01-cn03.yf01;yf-amdan02-cn03.yf01;tc-amdan03-cn03.tc;tc-amdan04-cn03.tc;tc-amdan05-cn03.tc.faker.bns | 
|          3293 | 10.65.43.159;db-hao123-mining00.db01.faker.bns                                                                                    | 
|          5295 | ai-sf-remora00.ai01.faker.bns                                                                                                     | 
|          5513 | db-iris-tp00.db01.faker.bns                                                                                                       | 
|          6338 | m1-quku-api00.m1.faker.bns                                                                                                        | 
|          7633 | tc-psop-dnsmon0.tc    .faker.bns                                                                                                     | 
|          7710 | yf-bae-pssui00.yf01.faker.bns                                                                                                     | 
|          7956 | cq01-ibase48.vm.faker.bns                                                                                                         | 
|          8824 | dbl-wise-ecom13-jx.dbl01.baidu.com.faker.bns                                                                                      | 
+---------------+-----------------------------------------------------------------------------------------------------------------------------------+
11 rows in set (0.00 sec)

#+END_SRC
* MySQL 的导入导出
** 导出
#+BEGIN_SRC sh
mysqldump -h10.23.247.91 -P3306 -uinf -p inf --skip-lock-tables > inf.sql 
#+END_SRC
说明：由于没有 root 账号，无法 Lock table，所以只能用 ~--skip-lock-table~
参数。
** 导入
#+BEGIN_SRC sh
mysql -hm1-dt-log01.m1 -P3306 -uzy -p bdg_bbs < inf.sql
#+END_SRC
** 生成建表语句
***  方法 1：使用 phpMyAdmin
我想把公司开发机上表复制到我的 Mac 上，方便测试，但是我没有找到方便生成建表语句的
工具。最后我发现 phpMyAdmin 可以很方便地帮我实现。下面是步骤：
1. 在 Web 上访问 phpMyAdmin，选择想要的表，然后选择 "导出"。
2. 指定导出那些记录，并确保 "对象创建选项" 中的 *CREATE TABLE 选项* 被勾选上，然
   后执行导出，导出的文件可以通过浏览器直接下载到 Mac 上。
3. 在 Mac 的终端里面执行 *mysql -uminos_test -pminos_test -Dminos_test <
   ~/Downloads/data_slice.sql* ，即完成了 *表的创建* 以及数据的导入。
***  方法 2：使用 mysqldump
使用 mysqldump，将整张或者部分表导出，因为导出数据的同时，还会把表结构也导出来，
然后的步骤就参考 " 导入"  一节了。
* MySQL 的安装
** 启动 mysqld
修改配置中的服务器端口号为 8306（为了让外网能访问公司的 mysqld），然后执行 mysqld，
mysql 服务器就简单地启动起来了。
** 创建数据库
#+BEGIN_SRC sql
create database minos_test;
#+END_SRC
** 创建用户
#+BEGIN_SRC sql
CREATE USER 'minos_test'@'%' IDENTIFIED BY 'minos_test';
#+END_SRC
** 赋权限
下面语句赋予了用户 minos_test 在任何机器上 minos_test 数据库中所有表的所有权限。
#+BEGIN_SRC sql
grant all privileges on minos.* to minos_test@'%' identified by 'minos_test';
#+END_SRC

** 自动补全
按 tab 自动是 mysql client 的设置，故需要在[mysql]下面配置，如下：
#+BEGIN_SRC sh
[mysql] 
auto-rehash 
#+END_SRC
顺带提一句，Mac 下 mysql 的配置的默认路径是 */etc/my.conf* 。

* MySQL 状态监控
** 查看连接数
show status 后的 Thread_connected 字段。
#+BEGIN_SRC mysql
mysql> show status;
...
...
| Threads_cached                    | 19            |
| Threads_connected                 | 23            |
| Threads_created                   | 301582        |
| Threads_running                   | 2             |
| Uptime                            | 6295556       |
| Uptime_since_flush_status         | 6295556       |
...
...
#+END_SRC
** 查看正在执行的查询
尤其是当我们发现查询阻塞时，我们可以通过 show processlist;来列出正在执行的查询。
#+BEGIN_SRC mysql
mysql> show processlist;
#+END_SRC

* MySQL Connector/C++
MySQL Connector/C++ 是 MySQL 官方推荐的 C++客户端。

- [[http://dev.mysql.com/doc/connector-cpp/en/connector-cpp-getting-started-examples.html][MySQL Connector/C++ Getting Started: Usage Examples]] 
  
隔壁组的同学包装了一个连接池，简化了该库的使用。

SQL 分为两类，查询是 executeQuery，剩下的增删改都是 executeUpdate。

* 问题记录：
** ERROR 1044 (42000): Access denied for user ''@'localhost' to database
当我执行 *mysql -uminos_test -Dminos_test -pminos_test;* 时报这个错误，我百思不
得其解，为啥我填写了用户名，但是报错中会提示我使用了一个空的用户名？后来我在 [[http://blog.csdn.net/tys1986blueboy/article/details/7056835][这
篇文章]] 上找到了答案，原来是我的 mysql.user 表中出现了用户名为空的 User。

** ERROR 1133 (42000): Can't find any matching row in the user table
原因：用户不存在！如果你是明明添加了用户，但是仍然这个错，那么就需要先执行：
*FLUSH PRIVILEGES;*
** 建表时提示：Specified key was too long; max key length is 767 bytes')
查明原因，是被的指定为 unique key 的某 string 字段太长了为 1024 * 3（因为是 Unicode），
建表代码如下：
#+BEGIN_SRC python
class ProductLine(Base):
    __tablename__ = 'product_line'

    id = Column(Integer, primary_key=True)
    noah_node_id = Column(Integer, unique=True, nullable=False)
    name = Column(String(1024), nullable=False)
    path = Column(String(1024), unique=True, nullable=False)
    department = Column(String(1024), nullable=False)
    log_module_num = Column(Integer)
#+END_SRC

由于 path 字段不能改得太小，我只能不将其设为 unique key，而是只留 noah_node_id 作为
unique key。
