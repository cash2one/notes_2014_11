#+TITLE: Tornado 框架
#+DATE: 2014-04-26


+ [[http://www.tornadoweb.org/][Tornado 主页]]

* 资料搜集
** Template
+ [[http://bibhas.in/blog/using-jinja2-as-the-template-engine-for-tornado-web-framework/][Using Jinja2 as the Template Engine for Tornado Web Framework]]
+ [[http://community.itbbs.cn/thread/20131/][Python 模板引擎性能对比]]
+ [[http://docs.python-guide.org/en/latest/scenarios/web/][Web Applications（最下面有 Tornado + Jinja2 的示例）]]

** 项目
+ [[https://github.com/facebook/tornado/tree/master/demos/chat][Tornado demo - Chat room]]
+ [[https://github.com/myoula/cakeshop][基于 tornado、peewee、jinja2 的商城]]

** 书籍
+ [[http://demo.pythoner.com/itt2zh/index.html][《Introduction to Tornado 中文版》]]
  
* 用户登录/认证
实现方式是实现一个 BaseHandler，里面实现了 get_current_user 函数。然后其他 Handler 继
承 BashHandler，并在要做用户认证的方法（如 get 和 post）函数前面加上一个修饰器
~@tornado.web.authenticated~  ，这样，触发该方法时，均会触发 get_current_user 函
数，如果 get_corrent_user 放回空，则 Tornado 会自动调用 login_url，触发用户登录。

* 请求处理
** 表单与 POST
对于 POST 类型的 Request，可以通过在 post 函数入口处 *print self.request.arguments* 打印
出所有参数来方便调试。

** 表单与 GET
如果表单的 method 为 GET，那么还是用 get_argument 来获取参数。
* SQLAlchemy
+ [[http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html][Engine Configuration]]
+ [[http://docs.jinkan.org/docs/flask/patterns/sqlalchemy.html][在 Flask 中使用 SQLAlchemy]] （介绍了以非 ORM 的方式来使用）

** 遍历 Model
有一种需求，就是将需要通过遍历的方式，将一个 Model 的所有字段给吐出来展示到前端页
面。Model 本身是无法迭代遍历的，用 for x in model 会报 *TypeError: 'LogConfig'
object is not iterable* 的错误。

我查了 Model 的所有接口，发现了__dict__，我用了一下，发现该接口把 Model 的所有字段以
字典的方式返回，这样就很方便地遍历了。如下：
#+BEGIN_SRC html
<tr>
    {% for key in log_config.__dict__ %}
        <td>{{ log_config[key] }}</td>
    {% endfor %}
</tr>
#+END_SRC

** 如何 Group 和 count
利用 SQLAlchemy 的 group_by 和 func 中的 count 函数可以轻易实现，如下：
#+BEGIN_SRC python
product_lines = session.query(NoahNode.department, func.count(NoahNode.department)) \
                .group_by(NoahNode.department).all()
#+END_SRC

** filter
*** 实现 not in
利用 Column 的 notin_方法（感谢 PyCharm 的自动提示功能！）
*** 实现 where in
利用 Column 的 in_方法（好像与上面的 not in 重了）

** 如何删除表中的一个记录？
方法：
1. 先通过 session 的 query() 配合 filter 找到该记录，返回实例
2. 调用 session.delete(object)
3. 调用 session.commit()

参考： [[http://docs.sqlalchemy.org/en/rel_0_9/orm/session.html#delete][Using the Session]]

** 更新记录
文档里面没找到如果更新记录的方法，于是挨个尝试接口，发现 ORM 的 session 没有 update 接
口，而且它的 flush 接口也不是用来更新记录的。

最后，我尝试了 add，发现它竟然能实现 update 的功能！


** 非 ORM 方式的使用
+ [[http://docs.jinkan.org/docs/flask/patterns/sqlalchemy.html][在 Flask 中使用 SQLAlchemy]] （介绍了以非 ORM 的方式来使用）

* 打日志
默认不把日志，除非在配置文件中配置了相关的配置型：
#+BEGIN_SRC python
log_to_stderr = True
log_file_prefix = './log/minos_web.log'
log_file_num_backups = 1000
#+END_SRC

并在 app 中加载配置：
#+BEGIN_SRC python
import tornado.options
tornado.options.parse_config_file("./minos.conf")
#+END_SRC
* 问题记录
** 模板中的 HTML 转义
默认情况，Tornado 的模板系统会为插入到其中的 HTML 执行转义，从而在页面上直接显示
HTML 源码。但有时候我们希望不要转义，这时候需要在借助 raw 关键词。如下：
#+BEGIN_EXAMPLE
{% raw *expr* %}
    Outputs the result of the given expression without autoescaping.
#+END_EXAMPLE

** 截取 GET 参数
Tornado 支持更优雅的 url 拼装方式，在写 url 路由的正则时，加入 () 就可以把 GET 参
数捕获。例如：
#+BEGIN_SRC python
app = tornado.web.Application(
     [
       (r"/", MainHandler),
       (r"/logflow/([^/]+)", LogFlowHandler),
     ],
)
#+END_SRC

