#+TITLE: Master多机化的开发

* 前言
Master多机化预计于今天（<2014-03-10 一>）开始正式进入开发阶段，比预期推迟了两周。
我计划在两周后完成开发并上线单台机器。

本篇日志按照开发进展来组织，记录下开发过程中的思考和开发进度，留作以后用（我不再
使用Evernote来记录这种 *开发进展类的笔记* 了，而是和其他笔记一样和使用Emacs
org-mode）。

* Master多机化的升级路线
Master多机化的新增特性非常多，如支持扩容缩容，分配传输任务，主从切换，负载均衡，
故障迁移，多Master下日志元信息的管理以及监控信息的汇总和展示等。所以， *必须要设
计好一个合理稳妥的升级路线* ，否则项目风险极大。制定升级路线应遵循一个原则： *逐
步迭代，持续发布* 。

** 第一步：抽取ConfigManager和FlowManager
从当前Master中抽取出ConfigManager和FlowManager来。让ConfigManager接管所有日志新增
/修改/删除的功能，以及为FlowManager分配日志传输任务的功能。让FlowManager只管理被
ConfigManager分配的日志模块。有几点要注意：
1. ConfigManager通过写FlowManager所在机器再ZK上的节点（以ip:port命名）来告知其管
   理的日志模块id列表
1. FlowManager任然可以获取日志配置，但是它只能获取它所管理的日志的配置
2. MinosMeta要提供一个新接口，能获取ConfigManager分配给某个FlowManager的日志模块
   的id列表
3. FlowManager的各种管理操作：包括Update（传输流的新建/修改/销毁），Save（更新
   Checkpoint到HDFS），Fallback（处理故障节点），Notify（通知下游数据系统），报警
   （传输延时的报警）都只调用FlowManager暴露出来的获取日志模块id的列表

这样改造后，能将Master的大部分针对传输流的管理操作做到与Master多机化无关，从而降
低风险。改造后，Master的架构如下：

#+begin_src ditaa :file multi-master-1.png
	     +---------------+	             +--------------+
       	     | ConfigManager |  read/write   |   ZooKeeper  |
             | cBLU	     +<------------->+	 c707       |
             |               |               |              |
             +---------------+ 	             +------+-------+
	    			       	       	    ^
	    			   	       	    | read/write
	      			   		    v
       	     +--------------------------------------+-------------------------+
  	     | 		       	        FlowManager    	       	       	      |
  	     | 				cGRE   	       	       	       	      |
       	     | +-------+ +-----+ +----------+ +--------+ +-------+ +--------+ |
  	     | |Updater| |Saver| |Fallbacker| |Notifier| |Alarmer| |....    | |
             | |cGRE   | |cGRE | |cGRE      | |cGRE    | |cGRE   | |cGRE    | |
       	     | +-------+ +-----+ +----------+ +--------+ +-------+ +--------+ |
       	     +----------------------------------------------------------------+
#+end_src

** 第二步：CentralMaster与Master的现形
完成将ConfigManager与FlowManager从Master中的抽取后，下面的工作可以不再与
FlowManager耦合，而是只与ConfigManager耦合。下面要使CentralMaster的设计在Minos系
统中成型。

CentralMaster在整个Minos系统中是唯一的，并且只有它才又权限管理日志配置，以及分配
传输任务。需要要保证它的唯一性（通过在ZK节点上写入自己的ip:port），以及高可用性
（通过主从切换）。

相应地，普通Master也要做好随时升级为CentralMaster的准备。

* 抽取ConfigManager和FlowManager
MinosMeta需要增加下面接口：
#+begin_src cpp
  RegisterMaster();       // 在ZK上创建临时节点，告知系统自己的存在。先定期
                          // Register，防止异常导致session过期而导致节点消失
  ListAllAliveMaster();   // 返回系统所有存活的Master的列表
  WriteIdListForMaster(); // 
#+end_src

* CentralMaster与Master的现形
MinosMeta需要增加下面接口：
#+begin_src cpp
  RegisterCentralMaster(); // 定期Register，先不使用Watch机制
#+end_src
